/*Nicholas Metzger
 * 8/4/16
 * main.cpp
 * 
 * Calendar Program
 *
 * Organizes the components of the calendar program in order to print to the
 * terminal a grid view of a specified calendar year from years 1 - 3000
 * with months and correct days of the week.
 */

#include <iostream>
using namespace std;

#include <ctype.h>
#include "calendar.h"

void commands(Calendar*);
void print_options();
void year_grid_view(int* year_ptr, bool* first_year_made_ptr,
				Calendar* cal_ptr);
void next_year(int *year_ptr, Calendar* cal_ptr);
void prev_year(int* year_ptr, Calendar* cal_ptr);
void month_grid_view(int* year_ptr, int* month_ptr, Calendar* cal_ptr);
void create_event(Calendar*);

int main()
{
	Calendar calendar;
	
	commands(&calendar);

    calendar.delete_memory();	
	return 0;	
}


/*
 * Purpose: Performs desired command.
 * Parameters: Calendar* cal_ptr is call by reference to calendar data.
 * Value returned: None (void function).
 */
void commands(Calendar* cal_ptr)
{
	int command = -1, year = -1, month = -1;
	bool done = false, first_year_made = false;
	
	cout << "Welcome to Metz Calendar!\n\n";
	while (!done)
	{
		print_options();
		cin >> command;
		
		if (command == 1)
			year_grid_view(&year, &first_year_made, cal_ptr);

		else if (command == 2)
			next_year(&year, cal_ptr);
			
		else if (command == 3)
			prev_year(&year, cal_ptr);
		
		else if (command == 4)
			month_grid_view(&year, &month, cal_ptr);

        else if (command == 5)
            create_event(cal_ptr);

		else if (command == 6)
			done = true;
		
		else //not valid command
			cout << "Not valid command\n";
		cout << endl;
	}
}


/*
 * Purpose: Orchestrates year grid view.
 * Parameters: int command, string* year_ptr, bool* first_year_made_ptr,
 * 				Calendar* cal_ptr.
 * Value returned: None (void function).
 */
void year_grid_view(int* year_ptr, bool* first_year_made_ptr,
				Calendar* cal_ptr)
{
		cin >> *year_ptr;
		
		if (*year_ptr < 1)
				cout << "\nOut of bounds\n";
		else
		{
			*first_year_made_ptr = true;
			cal_ptr->print_year_grid(*year_ptr);
		}
}


/*
 * Purpose: Prtins grid view of next year from current year.
 * Parameters: int *year_ptr. Calendar* cal_ptr.
 * Value returned: None (void function).
 */
void next_year(int *year_ptr, Calendar* cal_ptr)
{
	if (*year_ptr == -1)
		cout << "\nNo current year\n";

	else
		cal_ptr->print_year_grid(++(*year_ptr));
}


/*
 * Purpose: Prints grid view of previous year from current year.
 * Parameters: int* year_ptr. Calendar* cal_ptr.
 * Value returned: None (void function).
 */
void prev_year(int* year_ptr, Calendar* cal_ptr)
{
	if (*year_ptr == -1)
		cout << "\nNo current year\n";
	else if (*year_ptr < 2)
		cout << "\nOut of bounds\n";

	else
		cal_ptr->print_year_grid(--(*year_ptr));
}


/*
 * Purpose: Orchestrates month grid view.
 * Parameters: int* year_ptr, int* month_ptr, Calendar* cal_ptr
 * Value returned: None (void function).
 */
void month_grid_view(int* year_ptr, int* month_ptr, Calendar* cal_ptr)
{
	if (*year_ptr == -1)
		cout << "\nNo current year\n";
	else
	{
		cin >> *month_ptr;
			
		if (*year_ptr < 1 || *month_ptr < 1 || *month_ptr > 12)
		{
			cout << "\nOut of bounds\n";
		}

		else
			cal_ptr->print_month_grid(*year_ptr - 1, 
                                                        *month_ptr - 1);
	}
}

/*
Purpose:    Creates a new event and stores it in the correct day.
Parameters: None.
Returns:    None (void function).
*/
void create_event(Calendar *cal_ptr)
{
    cal->create_event();
}

/*
 * Purpose: Prints options.
 * Parameters: None.
 * Value returned: None (void function).
 */
void print_options()
{
	cout << "Input options\n\n" 
		<< "\tyear grid view        <1> <year> (year > 0)\n\n" 
		<< "\tnext year             <2>\n\n"
	   	<< "\tprevious year         <3>\n\n" 
		<< "\tmonth in current year <4> <month_num>\n\n"
	   	<< "\tcreate event          <5> <year> <month> <day>\n\n"
        << "\tquit                  <6>\n";
}
